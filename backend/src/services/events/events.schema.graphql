type Query {
  events: [Event!]!
  event(id: ID): Event
}

type Event {
  _id: ID!
  name: String!
  program: EventProgramSettings!
  workshops: [Workshop!]!
}

type EventProgramSettings {
  introductions: Introductions!
  danceSets: [DanceSet!]!
  slideStyleId: ID
  pauseBetweenDances: Float!
}

type Introductions {
  title: String
  titleSlideStyleId: ID
  program: [EventProgramRow!]!
}

type DanceSet {
  _id: ID!
  title: String!
  titleSlideStyleId: ID
  program: [EventProgramRow!]!
  intervalMusicDuration: Float!
}

type EventProgramRow {
  _id: ID!
  slideStyleId: ID
  item: EventProgramItem!
}
union EventProgramItem = RequestedDance | Dance | EventProgram

interface ProgramItem {
  name: String!
  duration: Float
  description: String
}

type RequestedDance {
  _: Int
}

type EventProgram implements ProgramItem {
  name: String!
  description: String
  duration: Float
  showInLists: Boolean!
  slideStyleId: ID
}

type Mutation {
  createEvent(event: EventInput!): Event!
  modifyEvent(id: ID!, event: EventInput!): Event!
  modifyEventProgram(id: ID!, program: ProgramInput!): Event!
  patchEventProgram(id: ID!, program: PatchProgramInput!): Event!
  deleteEvent(id: ID!): Event!
}

input EventInput {
  name: String!
  program: ProgramInput
}

input ProgramInput {
  introductions: IntroductionsInput!
  danceSets: [DanceSetInput!]!
  slideStyleId: ID
  "The pause between two program items in seconds"
  pauseBetweenDances: Float!
}

input IntroductionsInput {
  title: String
  titleSlideStyleId: ID
  program: [IntroductionInput!]!
}

input IntroductionInput {
  "Row id"
  _id: ID!
  slideStyleId: ID
  type: IntroductionProgramType!
  eventProgram: EventProgramInput
}

input DanceSetInput {
  _id: ID!
  title: String!
  titleSlideStyleId: ID
  program: [ProgramItemInput!]!
  "interval music duration in seconds"
  intervalMusicDuration: Float!
}

input ProgramItemInput {
  "Row id"
  _id: ID!
  slideStyleId: ID
  "The actual type of the item, the rest of the fields are used depending on the value of this field"
  type: ProgramType!
  dance: ID
  eventProgram: EventProgramInput
}

input EventProgramInput {
  name: String!
  description: String
  duration: Float
  showInLists: Boolean!
}

enum IntroductionProgramType {
  EventProgram
}
enum ProgramType {
  Dance
  EventProgram
  RequestedDance
}

input PatchEventInput {
  name: String
  program: PatchProgramInput
}

scalar JSONPatch

input PatchProgramInput {
  introductions: JSONPatch
  danceSets: JSONPatch
  slideStyleId: ID
}
