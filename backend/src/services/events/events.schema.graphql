type Query {
  events: [Event!]!
  event(id: ID): Event
}

type Event {
  _id: ID
  name: String!
  program: EventProgramSettings
  workshops: [Workshop!]!
}

type EventProgramSettings {
  introductions: [EventProgram!]!
  danceSets: [DanceSet!]!
  slideStyleId: ID
}

type DanceSet {
  _id: ID
  name: String!
  program: [EventProgramItem!]!
  intervalMusicDuration: Float
}

union EventProgramItem = RequestedDance | DanceProgram | EventProgram

interface ProgramItem {
  _id: ID
  name: String!
  duration: Float
  description: String
  slideStyleId: ID
}

type RequestedDance {
  slideStyleId: ID
}

type DanceProgram implements ProgramItem & DanceProps {
  _id: ID
  name: String!
  description: String
  duration: Float
  prelude: String
  formation: String
  category: String
  instructions: String
  remarks: String
  teachedIn(eventId: ID): [Workshop!]!
  slideStyleId: ID
}

type EventProgram implements ProgramItem {
  _id: ID
  name: String!
  description: String
  duration: Float
  showInLists: Boolean!
  slideStyleId: ID
}

type Mutation {
  createEvent(event: EventInput!): Event!
  modifyEvent(id: ID!, event: EventInput!): Event!
  modifyEventProgram(id: ID!, program: ProgramInput!): Event!
  deleteEvent(id: ID!): Event!
}

input EventInput {
  name: String!
}

input ProgramInput {
  introductions: [IntroductionInput!]!
  danceSets: [DanceSetInput!]!
  slideStyleId: ID
}

input DanceSetInput {
  _id: ID
  name: String!
  program: [ProgramItemInput!]!
  intervalMusicDuration: Float
}

input ProgramItemInput {
  "The actual type of the item, the other fields are used depending on the value of this field"
  type: ProgramType!
  "The id of the program to use when type is EVENT_PROGRAM"
  eventProgramId: ID
  "The value to use when type is EVENT_PROGRAM"
  eventProgram: EventProgramInput
  "The id of the dance to use when type is DANCE"
  danceId: ID
  slideStyleId: ID
}

input IntroductionInput {
  eventProgramId: ID
  "The value to use when modifying event program"
  eventProgram: EventProgramInput
  slideStyleId: ID
}

enum ProgramType {
  DANCE
  EVENT_PROGRAM
  REQUESTED_DANCE
}

input EventProgramInput {
  name: String!
  description: String
  duration: Float
  showInLists: Boolean!
}
