type Query {
  workshop(id: ID!): Workshop!
}

type Workshop {
  _id: ID!
  eventId: ID!
  event: Event!
  name: String!
  abbreviation: String
  description: String
  teachers: String
  danceIds: [ID!]!
  dances: [Dance!]!
  instances: [WorkshopInstance!]!
}

type WorkshopInstance {
  _id: ID!
  abbreviation: String
  description: String
  beginDate: String!
  endDate: String!
  danceIds: [ID!]!
  dances: [Dance!]!
}

type Mutation {
  createWorkshop(eventId: ID!, workshop: WorkshopInput!): Workshop!
  modifyWorkshop(id: ID!, workshop: WorkshopInput!): Workshop!
  patchWorkshop(id: ID!, workshop: WorkshopPatchInput!): Workshop!
  deleteWorkshop(id: ID!): Workshop!
}

input WorkshopInput {
  name: String!
  abbreviation: String
  description: String
  teachers: String
  ocurrences: [String!]
  instances: [WorkshopInstanceInput!]!
}

input WorkshopPatchInput {
  name: String
  abbreviation: String
  description: String
  teachers: String
  ocurrences: [String!]
  instances: [WorkshopInstanceInput!]
}

input WorkshopInstanceInput {
  _id: ID!
  abbreviation: String
  description: String
  beginDate: String
  endDate: String
  danceIds: [ID!]!
}
